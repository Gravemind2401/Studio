<Application x:Class="Sandbox.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:s="clr-namespace:Studio.Controls;assembly=Studio"
             xmlns:m="clr-namespace:Sandbox.Models"
             xmlns:u="clr-namespace:Sandbox.Utilities"
             xmlns:su="clr-namespace:Studio.Utilities;assembly=Studio"
             xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:local="clr-namespace:Sandbox"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Studio;component/Themes/Blue.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <u:TabTreeTemplateSelector x:Key="tabTreeTemplateSelector" />

            <DataTemplate x:Key="SplitPaneTemplate" DataType="m:SplitModel">
                <s:SplitContainer Orientation="{Binding Orientation}"
                    Panel1Content="{Binding Item1}"
                    Panel1Size="{Binding Item1Size}"
                    Panel2Content="{Binding Item2}"
                    Panel2Size="{Binding Item2Size}"
                    Panel1MinSize="65" Panel2MinSize="65"
                    ContentTemplateSelector="{StaticResource tabTreeTemplateSelector}" />
            </DataTemplate>
            
            <DataTemplate x:Key="DocumentGroupTemplate" DataType="m:TabGroupModel">
                <s:DocumentWell ItemsSource="{Binding Children}"
                                s:DockManager.IsActive="{Binding IsActive}"
                                SelectedItem="{Binding SelectedItem}"
                                OverflowItemSelectedCommand="{Binding SelectItemCommand}"
                                FloatTabCommand="{Binding FloatTabCommand}"
                                DockCommand="{Binding DockCommand}">
                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{Binding Content}" />
                        </DataTemplate>
                    </TabControl.ContentTemplate>
                    <TabControl.ItemContainerStyle>
                        <Style TargetType="s:TabWellItem" BasedOn="{StaticResource {x:Static s:DocumentWell.DocumentTabStyleKey}}">
                            <Setter Property="CloseCommand" Value="{Binding Parent.CloseTabCommand}" />
                            <Setter Property="TogglePinStatusCommand" Value="{Binding Parent.TogglePinStatusCommand}" />
                            <Setter Property="Header" Value="{Binding Header}" />
                            <Setter Property="s:DockManager.IsPinned" Value="{Binding IsPinned}" />
                        </Style>
                    </TabControl.ItemContainerStyle>
                </s:DocumentWell>
            </DataTemplate>

            <DataTemplate x:Key="ToolGroupTemplate" DataType="m:TabGroupModel">
                <s:ToolWell x:Name="toolWell" ItemsSource="{Binding Children}"
                            s:DockManager.IsActive="{Binding IsActive}"
                            SelectedItem="{Binding SelectedItem}"
                            Caption="{Binding SelectedItem.ToolTip}"
                            CloseCommand="{Binding CloseTabCommand}"
                            TogglePinStatusCommand="{Binding TogglePinStatusCommand}"
                            FloatTabCommand="{Binding FloatTabCommand}"
                            FloatCommand="{Binding ParentViewModel.FloatGroupCommand}"
                            DockCommand="{Binding DockCommand}">
                    <su:ProxyBinding.ProxyBindings>
                        <su:ProxyBindingCollection>
                            <su:ProxyBinding Source="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                             Target="{Binding Width, Mode=OneWayToSource}" />
                            <su:ProxyBinding Source="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=TabControl}}"
                                             Target="{Binding Height, Mode=OneWayToSource}" />
                        </su:ProxyBindingCollection>
                    </su:ProxyBinding.ProxyBindings>
                    <TabControl.ContentTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{Binding Content}" />
                        </DataTemplate>
                    </TabControl.ContentTemplate>
                    <TabControl.ItemContainerStyle>
                        <Style TargetType="s:TabWellItem" BasedOn="{StaticResource {x:Static s:ToolWell.ToolTabStyleKey}}">
                            <Setter Property="CloseCommand" Value="{Binding Parent.CloseTabCommand}" />
                            <Setter Property="TogglePinStatusCommand" Value="{Binding Parent.TogglePinStatusCommand}" />
                            <Setter Property="Header" Value="{Binding Header}" />
                        </Style>
                    </TabControl.ItemContainerStyle>
                </s:ToolWell>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsWindow}" Value="True">
                        <Setter TargetName="toolWell" Property="HideTitleBar" Value="True" />
                        <Setter TargetName="toolWell" Property="BorderThickness" Value="1,0,1,1" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            
            <DataTemplate x:Key="DockedToolTemplate" DataType="m:TabModel">
                <DataTemplate.Resources>
                    <u:GridLengthConverter x:Key="gridLengthConverter" />
                </DataTemplate.Resources>
                <s:SplitContainer x:Name="split"
                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                        VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                        Panel1MinSize="65" Panel2MinSize="65">
                    <s:SplitContainer.SplitterStyle>
                        <Style TargetType="GridSplitter">
                            <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
                            <Setter Property="ShowsPreview" Value="True" />
                            <Setter Property="Background" Value="{DynamicResource Environment.EnvironmentBackground}" />
                            <Setter Property="MinWidth" Value="3" />
                            <Setter Property="MinHeight" Value="3" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                        </Style>
                    </s:SplitContainer.SplitterStyle>
                    <s:SplitContainer.ContentTemplate>
                        <DataTemplate>
                            <s:ToolWell s:DockManager.IsActive="{Binding IsActive}"
                                        s:DockManager.IsPinned="True"
                                        CloseCommand="{Binding Parent.CloseTabCommand}"
                                        TogglePinStatusCommand="{Binding Parent.TogglePinStatusCommand}"
                                        Caption="{Binding ToolTip}">
                                <s:TabWellItem Content="{Binding Content}" />
                            </s:ToolWell>
                        </DataTemplate>
                    </s:SplitContainer.ContentTemplate>
                </s:SplitContainer>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding SelectedItemDock, RelativeSource={RelativeSource AncestorType=s:DockContainer}}" Value="Left">
                        <Setter TargetName="split" Property="Margin" Value="0,6" />
                        <Setter TargetName="split" Property="Orientation" Value="Horizontal" />
                        <Setter TargetName="split" Property="Panel1Content" Value="{Binding}" />
                        <Setter TargetName="split" Property="Panel1Size" Value="{Binding Width, Converter={StaticResource gridLengthConverter}}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding SelectedItemDock, RelativeSource={RelativeSource AncestorType=s:DockContainer}}" Value="Top">
                        <Setter TargetName="split" Property="Margin" Value="6,0" />
                        <Setter TargetName="split" Property="Orientation" Value="Vertical" />
                        <Setter TargetName="split" Property="Panel1Content" Value="{Binding}" />
                        <Setter TargetName="split" Property="Panel1Size" Value="{Binding Height, Converter={StaticResource gridLengthConverter}}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding SelectedItemDock, RelativeSource={RelativeSource AncestorType=s:DockContainer}}" Value="Right">
                        <Setter TargetName="split" Property="Margin" Value="0,6" />
                        <Setter TargetName="split" Property="Orientation" Value="Horizontal" />
                        <Setter TargetName="split" Property="Panel2Content" Value="{Binding}" />
                        <Setter TargetName="split" Property="Panel2Size" Value="{Binding Width, Converter={StaticResource gridLengthConverter}}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding SelectedItemDock, RelativeSource={RelativeSource AncestorType=s:DockContainer}}" Value="Bottom">
                        <Setter TargetName="split" Property="Margin" Value="6,0" />
                        <Setter TargetName="split" Property="Orientation" Value="Vertical" />
                        <Setter TargetName="split" Property="Panel2Content" Value="{Binding}" />
                        <Setter TargetName="split" Property="Panel2Size" Value="{Binding Height, Converter={StaticResource gridLengthConverter}}" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <Style x:Key="ToolWindowMaxButtonStyle" TargetType="Button">
                <Setter Property="Margin" Value="0,0,1,0" />
                <Setter Property="Width" Value="15" />
                <Setter Property="Height" Value="15" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="Template" Value="{StaticResource ButtonBaseTemplate}" />

                <!--inactive-->
                <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonInactiveGlyph}" />

                <Style.Triggers>
                    <!--active-->
                    <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
                        <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonActiveGlyph}" />
                    </DataTrigger>

                    <!--active, hovered-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True" />
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonHoverActiveGlyph}" />
                        <Setter Property="Background" Value="{DynamicResource Environment.ToolWindow.ButtonHoverActive}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Environment.ToolWindow.ButtonHoverActiveBorder}" />
                    </MultiDataTrigger>

                    <!--active, pressed-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="True" />
                            <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonDownActiveGlyph}" />
                        <Setter Property="Background" Value="{DynamicResource Environment.ToolWindow.ButtonDown}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Environment.ToolWindow.ButtonDownBorder}" />
                    </MultiDataTrigger>

                    <!--inactive, hovered-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False" />
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonHoverInactiveGlyph}" />
                        <Setter Property="Background" Value="{DynamicResource Environment.ToolWindow.ButtonHoverInactive}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Environment.ToolWindow.ButtonHoverInactiveBorder}" />
                    </MultiDataTrigger>

                    <!--inactive, pressed-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False" />
                            <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource Environment.ToolWindow.ButtonDownInactiveGlyph}" />
                        <Setter Property="Background" Value="{DynamicResource Environment.ToolWindow.ButtonDown}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Environment.ToolWindow.ButtonDownBorder}" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ToolWindowCloseButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolWindowMaxButtonStyle}">
                <Setter Property="VerticalContentAlignment" Value="Top" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="Padding" Value="2,2,0,0" />
                <Setter Property="Margin" Value="0,0,3,0" />
            </Style>

            <Style x:Key="ToolWindowStyle" TargetType="metro:MetroWindow">
                <Setter Property="Background" Value="{DynamicResource Environment.EnvironmentBackground}" />

                <Setter Property="WindowTitleBrush" Value="{DynamicResource Environment.TitleBar.ActiveGradient}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Environment.MainWindow.ActiveDefaultBorder}" />
                <!--<Setter Property="GlowBrush" Value="{DynamicResource Environment.MainWindow.ActiveDefaultBorder}" />-->

                <Setter Property="NonActiveWindowTitleBrush" Value="{DynamicResource Environment.TitleBar.InactiveGradient}" />
                <Setter Property="NonActiveBorderBrush" Value="{DynamicResource Environment.MainWindow.InactiveBorder}" />
                <!--<Setter Property="NonActiveGlowBrush" Value="{DynamicResource Environment.MainWindow.InactiveBorder}" />-->

                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="TitleCaps" Value="False" />
                <Setter Property="TitlebarHeight" Value="21" />
                <Setter Property="TitleForeground" Value="{DynamicResource Environment.TitleBar.InactiveText}" />
                <Setter Property="WindowTransitionsEnabled" Value="False" />

                <Setter Property="WindowMaxButtonStyle" Value="{StaticResource ToolWindowMaxButtonStyle}" />
                <Setter Property="WindowCloseButtonStyle" Value="{StaticResource ToolWindowCloseButtonStyle}" />

                <Setter Property="ShowInTaskbar" Value="False" />
                <Setter Property="ShowMinButton" Value="False" />

                <Style.Triggers>
                    <Trigger Property="IsActive" Value="True">
                        <Setter Property="TitleForeground" Value="{DynamicResource Environment.TitleBar.ActiveText}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
